#!/usr/bin/utpl
{%
    "use strict";
    import { stat } from "fs";
    import { load_config } from "./common/config.mjs";
    const ignore_tp_spec_def_gw = stat("/usr/share/xray/ignore_tp_spec_def_gw");
    const config = load_config();
    const general = config[filter(keys(config), k => config[k][".type"] == "general")[0]];
    const tcp4_enabled = length(general.tcp_balancer || []) > 0;
    const udp4_enabled = length(general.udp_balancer || []) > 0;
    const tcp6_enabled = length(general.tcp_balancer_v6 || []) > 0;
    const udp6_enabled = length(general.udp_balancer_v6 || []) > 0;
    const uids_direct = uniq(general.uids_direct || []);
    const gids_direct = uniq(general.gids_direct || []);
    let wan_bp_ips_no_dns = general.wan_bp_ips || [];
    let wan_fw_ips_no_dns = general.wan_fw_ips || [];
    push(wan_bp_ips_no_dns, split(general.fast_dns, ":")[0]);
    push(wan_fw_ips_no_dns, split(general.secure_dns, ":")[0]);
    const wan_bp_ips_v4 = filter(uniq(wan_bp_ips_no_dns), v => index(v, ":") == -1);
    const wan_bp_ips_v6 = filter(uniq(wan_bp_ips_no_dns), v => index(v, ":") != -1);
    const wan_fw_ips_v4 = filter(uniq(wan_fw_ips_no_dns), v => index(v, ":") == -1);
    const wan_fw_ips_v6 = filter(uniq(wan_fw_ips_no_dns), v => index(v, ":") != -1);
    const transparent_default_port_policy = general.transparent_default_port_policy || "forwarded";
    const wan_fw_tcp_ports = general.wan_fw_tcp_ports || [];
    const wan_fw_udp_ports = general.wan_fw_udp_ports || [];
    const wan_bp_tcp_ports = general.wan_bp_tcp_ports || [];
    const wan_bp_udp_ports = general.wan_bp_udp_ports || [];
    const counter_template = "counter packets 0 bytes 0";
    let counter = "";
    if (general.fw4_counter == "1") {
        counter = counter_template;
    };
    const firewall_priority = function () {
        if (general.firewall_priority == null) {
            return "+10";
        }
        if (int(general.firewall_priority) > 0) {
            return sprintf("+%s", general.firewall_priority);
        };
        return sprintf("%s", general.firewall_priority);
    }();
    const manual_tproxy = filter(keys(config), k => config[k][".type"] == "manual_tproxy") || [];
    const manual_tproxy_source_ips = map(filter(manual_tproxy, k => config[k]["sniffing"] != "1"), k => config[k]["source_addr"]) || [];
    const manual_tproxy_sniffing_source_ips = map(filter(manual_tproxy, k => config[k]["sniffing"] == "1"), k => config[k]["source_addr"]) || [];

    const tp_spec_sm4_bp = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].access_control_strategy_v4 == "bypass"), k => config[k].macaddr) || []);
    const tp_spec_sm6_bp = uniq(map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].access_control_strategy_v6 == "bypass"), k => config[k].macaddr) || []);
    const tp_spec_sm4_fw = map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].access_control_strategy_v4 == "forward"), k => config[k]);
    const tp_spec_sm6_fw = map(filter(keys(config), k => config[k][".type"] == "lan_hosts" && config[k].access_control_strategy_v6 == "forward"), k => config[k]);

    const used_extra_inbound = uniq([
        ...map(tp_spec_sm4_fw, k => k["access_control_forward_tcp_v4"]),
        ...map(tp_spec_sm4_fw, k => k["access_control_forward_udp_v4"]),
        ...map(tp_spec_sm6_fw, k => k["access_control_forward_tcp_v6"]),
        ...map(tp_spec_sm6_fw, k => k["access_control_forward_udp_v6"]),
    ]);
    let extra_inbound_tcp_v4_map = {};
    let extra_inbound_udp_v4_map = {};
    let extra_inbound_tcp_v6_map = {};
    let extra_inbound_udp_v6_map = {};
    for (let i in used_extra_inbound) {
        let tcp_v4_items = [];
        let udp_v4_items = [];
        let tcp_v6_items = [];
        let udp_v6_items = [];
        for (let j in tp_spec_sm4_fw) {
            if (j["access_control_forward_tcp_v4"] == i) {
                push(tcp_v4_items, j["macaddr"]);
            }
            if (j["access_control_forward_udp_v4"] == i) {
                push(udp_v4_items, j["macaddr"]);
            }
        }
        if (length(tcp_v4_items) > 0) {
            extra_inbound_tcp_v4_map[i] = tcp_v4_items;
        }
        if (length(udp_v4_items) > 0) {
            extra_inbound_udp_v4_map[i] = udp_v4_items;
        }
        for (let j in tp_spec_sm6_fw) {
            if (j["access_control_forward_tcp_v6"] == i) {
                push(tcp_v6_items, j["macaddr"]);
            }
            if (j["access_control_forward_udp_v6"] == i) {
                push(udp_v6_items, j["macaddr"]);
            }
        }
        if (length(tcp_v6_items) > 0) {
            extra_inbound_tcp_v6_map[i] = tcp_v6_items;
        }
        if (length(udp_v6_items) > 0) {
            extra_inbound_udp_v6_map[i] = udp_v6_items;
        }
    }
%}

    set tp_spec_sm4_bp {
        type ether_addr
        size 65536
        flags constant
{% if (length(tp_spec_sm4_bp) > 0): %}
        elements = { {{ join(", ", tp_spec_sm4_bp) }} }
{% endif %}
    }

    set tp_spec_sm6_bp {
        type ether_addr
        size 65536
        flags constant
{% if (length(tp_spec_sm6_bp) > 0): %}
        elements = { {{ join(", ", tp_spec_sm6_bp) }} }
{% endif %}
    }

{% for (let i in extra_inbound_tcp_v4_map): %}
    set tp_spec_sm4_ft_{{ i }} {
        type ether_addr
        size 65536
        flags constant
        elements = { {{ join(", ", extra_inbound_tcp_v4_map[i]) }} }
    }
{% endfor %}

{% for (let i in extra_inbound_udp_v4_map): %}
    set tp_spec_sm4_fu_{{ i }} {
        type ether_addr
        size 65536
        flags constant
        elements = { {{ join(", ", extra_inbound_udp_v4_map[i]) }} }
    }
{% endfor %}

{% for (let i in extra_inbound_tcp_v6_map): %}
    set tp_spec_sm6_ft_{{ i }} {
        type ether_addr
        size 65536
        flags constant
        elements = { {{ join(", ", extra_inbound_tcp_v6_map[i]) }} }
    }
{% endfor %}

{% for (let i in extra_inbound_udp_v6_map): %}
    set tp_spec_sm6_fu_{{ i }} {
        type ether_addr
        size 65536
        flags constant
        elements = { {{ join(", ", extra_inbound_udp_v6_map[i]) }} }
    }
{% endfor %}

{% if (length(manual_tproxy_source_ips) > 0): %}
    set tp_spec_dv4_mt {
        type ipv4_addr
        size 65536
        flags constant, interval
        elements = { {{ join(", ", manual_tproxy_source_ips) }} }
    }
{% endif %}

{% if (length(manual_tproxy_sniffing_source_ips) > 0): %}
    set tp_spec_dv4_ms {
        type ipv4_addr
        size 65536
        flags constant, interval
        elements = { {{ join(", ", manual_tproxy_sniffing_source_ips) }} }
    }
{% endif %}

    set tp_spec_dv4_sp {
        type ipv4_addr
        size 16
        flags constant, interval
        elements = { 0.0.0.0/8, 10.0.0.0/8,
                     100.64.0.0/10, 127.0.0.0/8,
                     169.254.0.0/16, 172.16.0.0/12,
                     192.0.0.0/24, 192.52.193.0/24,
                     192.168.0.0/16, 224.0.0.0/3 }
    }

    set tp_spec_dv6_sp {
            type ipv6_addr
            flags constant,interval
            elements = { ::,
                         ::1,
                         ::ffff:0.0.0.0/96,
                         ::ffff:0:0:0/96,
                         64:ff9b::/96,
                         100::/64,
                         2001::/32,
                         2001:20::/28,
                         2001:db8::/32,
                         2002::/16,
                         fc00::/7,
                         fe80::/10,
                         ff00::/8 }
    }

    set tp_spec_dv4_bp {
        type ipv4_addr
        size {{ length(wan_bp_ips_v4) }}
{% if (length(wan_bp_ips_v4) > 0): %}
        flags constant, interval
        elements = { {{ join(", ", wan_bp_ips_v4)}} }
{% endif %}
    }

    set tp_spec_dv6_bp {
        type ipv6_addr
        size {{ length(wan_bp_ips_v6) }}
{% if (length(wan_bp_ips_v6) > 0): %}
        flags constant, interval
        elements = { {{ join(", ", wan_bp_ips_v6)}} }
{% endif %}
    }

    set tp_spec_dv4_fw {
        type ipv4_addr
        size {{ length(wan_fw_ips_v4) }}
{% if (length(wan_fw_ips_v4) > 0): %}
        flags constant, interval
        elements = { {{ join(", ", wan_fw_ips_v4)}} }
{% endif %}
    }

    set tp_spec_dv6_fw {
        type ipv6_addr
        size {{ length(wan_fw_ips_v6) }}
{% if (length(wan_fw_ips_v6) > 0): %}
        flags constant, interval
        elements = { {{ join(", ", wan_fw_ips_v6)}} }
{% endif %}
    }

{% if (ignore_tp_spec_def_gw == null): %}
    set tp_spec_dv4_dg {
        type ipv4_addr
        size 16
        flags interval
    }
{% endif %}

    set tp_spec_dv6_dg {
        type ipv6_addr
        size 16
        flags interval
    }

    chain xray_transparent_proxy {
        type filter hook prerouting priority filter {{ firewall_priority }}; policy accept;
        mark 0x000000fb {{ counter }} goto tp_spec_wan_fw
        ip protocol tcp {{ counter }} accept comment "Todo: Xray add dynamic direct tcp set here"
        ip protocol udp {{ counter }} accept comment "Todo: Xray add dynamic direct udp set here"
        ip6 nexthdr tcp {{ counter }} accept comment "Todo: Xray add dynamic direct tcp set here"
        ip6 nexthdr udp {{ counter }} accept comment "Todo: Xray add dynamic direct udp set here"
        {{ counter }} accept
    }

    chain tp_spec_wan_fw {
{% if (length(manual_tproxy_source_ips) > 0): %}
        ip protocol tcp ip daddr @tp_spec_dv4_mt {{ counter }} tproxy ip to :{{ general.tproxy_port_tcp || 1080 }} accept
        ip protocol udp ip daddr @tp_spec_dv4_mt {{ counter }} tproxy ip to :{{ general.tproxy_port_udp || 1081 }} accept
{% endif %}
{% if (length(manual_tproxy_sniffing_source_ips) > 0): %}
        ip protocol tcp ip daddr @tp_spec_dv4_ms {{ counter }} tproxy ip to :{{ general.tproxy_port_tcp_ms || 1088 }} accept
        ip protocol udp ip daddr @tp_spec_dv4_ms {{ counter }} tproxy ip to :{{ general.tproxy_port_udp_ms || 1089 }} accept
{% endif %}
{% for (let i in extra_inbound_tcp_v4_map): %}
        ip protocol tcp ether saddr @tp_spec_sm4_ft_{{ i }} {{ counter }} tproxy ip to :{{ config[i].inbound_port }} accept
{% endfor %}
{% for (let i in extra_inbound_udp_v4_map): %}
        ip protocol udp ether saddr @tp_spec_sm4_fu_{{ i }} {{ counter }} tproxy ip to :{{ config[i].inbound_port }} accept
{% endfor %}
{% for (let i in extra_inbound_tcp_v6_map): %}
        ip6 nexthdr tcp ether saddr @tp_spec_sm6_ft_{{ i }} {{ counter }} tproxy ip6 to :{{ config[i].inbound_port }} accept
{% endfor %}
{% for (let i in extra_inbound_udp_v6_map): %}
        ip6 nexthdr udp ether saddr @tp_spec_sm6_fu_{{ i }} {{ counter }} tproxy ip6 to :{{ config[i].inbound_port }} accept
{% endfor %}
{% if (tcp4_enabled): %}
        ip protocol tcp {{ counter }} tproxy ip to :{{ general.tproxy_port_tcp || 1080 }} accept
{% else %}
        ip protocol tcp {{ counter }} meta mark set {{ sprintf("0x%08x", general.mark) }} accept
{% endif %}
{% if (udp4_enabled): %}
        ip protocol udp {{ counter }} tproxy ip to :{{ general.tproxy_port_udp || 1081 }} accept
{% else %}
        ip protocol udp {{ counter }} meta mark set {{ sprintf("0x%08x", general.mark) }} accept
{% endif %}
{% if (tcp6_enabled): %}
        ip6 nexthdr tcp {{ counter }} tproxy ip6 to :{{ general.tproxy_port_tcp_v6 || 1084 }} accept
{% else %}
        ip6 nexthdr tcp {{ counter }} meta mark set {{ sprintf("0x%08x", general.mark) }} accept
{% endif %}
{% if (udp6_enabled): %}
        ip6 nexthdr udp {{ counter }} tproxy ip6 to :{{ general.tproxy_port_udp_v6 || 1085 }} accept
{% else %}
        ip6 nexthdr udp {{ counter }} meta mark set {{ sprintf("0x%08x", general.mark) }} accept
{% endif %}
        {{ counter }} accept
    }

    chain xray_prerouting {
        type filter hook prerouting priority mangle {{ firewall_priority }}; policy accept;
        mark 0x000000fb {{ counter }} accept comment "Xray remarked from output"
        ip protocol tcp ether saddr @tp_spec_sm4_bp {{ counter }} accept
        ip protocol udp ether saddr @tp_spec_sm4_bp {{ counter }} accept
        ip6 nexthdr tcp ether saddr @tp_spec_sm6_bp {{ counter }} accept
        ip6 nexthdr udp ether saddr @tp_spec_sm6_bp {{ counter }} accept
        ip protocol tcp iifname { "{{ join('", "', general.lan_ifaces) }}" } {{ counter }} goto tp_spec_lan_ac
        ip protocol udp iifname { "{{ join('", "', general.lan_ifaces) }}" } {{ counter }} goto tp_spec_lan_ac
        ip6 nexthdr tcp iifname { "{{ join('", "', general.lan_ifaces) }}" } {{ counter }} goto tp_spec_lan_ac
        ip6 nexthdr udp iifname { "{{ join('", "', general.lan_ifaces) }}" } {{ counter }} goto tp_spec_lan_ac
        ip protocol tcp {{ counter }} accept
        ip protocol udp {{ counter }} accept
        ip6 nexthdr tcp {{ counter }} accept
        ip6 nexthdr udp {{ counter }} accept
        {{ counter }} accept
    }

    chain xray_output {
        type route hook output priority mangle {{ firewall_priority }}; policy accept;
{% if (length(uids_direct) > 0): %}
        meta skuid { {{ join(", ", uids_direct) }} } {{ counter }} accept
{% endif %}
{% if (length(gids_direct) > 0): %}
        meta skgid { {{ join(", ", gids_direct) }} } {{ counter }} accept
{% endif %}
        ip protocol tcp {{ counter }} goto tp_spec_wan_ac
        ip protocol udp {{ counter }} goto tp_spec_wan_ac
        ip6 nexthdr tcp {{ counter }} goto tp_spec_wan_ac
        ip6 nexthdr udp {{ counter }} goto tp_spec_wan_ac
        {{ counter }} accept
    }

    chain tp_spec_wan_ac {
        ip protocol tcp mark 0x000000fc {{ counter }} accept comment "Xray direct outbound"
        ip protocol udp mark 0x000000fc {{ counter }} accept comment "Xray direct outbound"
        ip6 nexthdr tcp mark 0x000000fc {{ counter }} accept comment "Xray direct outbound"
        ip6 nexthdr udp mark 0x000000fc {{ counter }} accept comment "Xray direct outbound"
        meta mark 0x000000fd {{ counter }} accept comment "Xray transparent proxy outbound"
        meta mark 0x000000fe {{ counter }} accept comment "Xray non-IP DNS query outbound"
        meta mark {{ sprintf("0x%08x", general.mark) }} {{ counter }} accept comment "Xray specified mark {{ general.mark }} outbound"
        {{ counter }} goto tp_spec_lan_ac
    }

    chain tp_spec_lan_ac {
{% if (length(manual_tproxy_source_ips) > 0): %}
        ip daddr @tp_spec_dv4_mt {{ counter }} goto tp_spec_lan_re
{% endif %}
{% if (length(manual_tproxy_sniffing_source_ips) > 0): %}
        ip daddr @tp_spec_dv4_ms {{ counter }} goto tp_spec_lan_re
{% endif %}
        ip daddr @tp_spec_dv4_fw {{ counter }} goto tp_spec_lan_re
        ip6 daddr @tp_spec_dv6_fw {{ counter }} goto tp_spec_lan_re
{% if (ignore_tp_spec_def_gw == null): %}
        ip daddr @tp_spec_dv4_dg {{ counter }} accept
{% endif %}
        ip6 daddr @tp_spec_dv6_dg {{ counter }} accept
        ip daddr @tp_spec_dv4_bp {{ counter }} accept
        ip6 daddr @tp_spec_dv6_bp {{ counter }} accept
        ip daddr @tp_spec_dv4_sp {{ counter }} accept
        ip6 daddr @tp_spec_dv6_sp {{ counter }} accept
        {{ counter }} goto tp_spec_lan_re
    }

    chain tp_spec_lan_re {
{% if (transparent_default_port_policy == "bypassed"): %}
    {% if (length(wan_fw_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_fw_tcp_ports) }} } {{ counter }} goto tp_spec_lan_fw
    {% endif %}
    {% if (length(wan_fw_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_fw_udp_ports) }} } {{ counter }} goto tp_spec_lan_fw
    {% endif %}
{% else %}
    {% if (length(wan_bp_tcp_ports) > 0): %}
        tcp dport { {{ join(", ", wan_bp_tcp_ports) }} } {{ counter }} accept
    {% endif %}
    {% if (length(wan_bp_udp_ports) > 0): %}
        udp dport { {{ join(", ", wan_bp_udp_ports) }} } {{ counter }} accept
    {% endif %}
        meta l4proto tcp {{ counter }} goto tp_spec_lan_fw
        meta l4proto udp {{ counter }} goto tp_spec_lan_fw
{% endif %}
        {{ counter }} accept
    }

    chain tp_spec_lan_fw {
        {{ counter }} meta mark set 0x000000fb comment "Todo: to enable dynamic direct, add set dispatch before this line and add nf_queue here"
    }
